// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mq

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MqClient is the client API for Mq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqClient interface {
	// php:inline
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// php:inline
	DelayPublish(ctx context.Context, in *DelayPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// php:inline
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// php:inline
	Ack(ctx context.Context, in *QueueId, opts ...grpc.CallOption) (*empty.Empty, error)
	// php:inline
	Nack(ctx context.Context, in *QueueId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mqClient struct {
	cc grpc.ClientConnInterface
}

func NewMqClient(cc grpc.ClientConnInterface) MqClient {
	return &mqClient{cc}
}

func (c *mqClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mq.Mq/publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqClient) DelayPublish(ctx context.Context, in *DelayPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mq.Mq/delayPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/mq.Mq/subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqClient) Ack(ctx context.Context, in *QueueId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mq.Mq/ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqClient) Nack(ctx context.Context, in *QueueId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mq.Mq/nack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqServer is the server API for Mq service.
// All implementations must embed UnimplementedMqServer
// for forward compatibility
type MqServer interface {
	// php:inline
	Publish(context.Context, *PublishRequest) (*empty.Empty, error)
	// php:inline
	DelayPublish(context.Context, *DelayPublishRequest) (*empty.Empty, error)
	// php:inline
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// php:inline
	Ack(context.Context, *QueueId) (*empty.Empty, error)
	// php:inline
	Nack(context.Context, *QueueId) (*empty.Empty, error)
	mustEmbedUnimplementedMqServer()
}

// UnimplementedMqServer must be embedded to have forward compatible implementations.
type UnimplementedMqServer struct {
}

func (UnimplementedMqServer) Publish(context.Context, *PublishRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMqServer) DelayPublish(context.Context, *DelayPublishRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelayPublish not implemented")
}
func (UnimplementedMqServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMqServer) Ack(context.Context, *QueueId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedMqServer) Nack(context.Context, *QueueId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}
func (UnimplementedMqServer) mustEmbedUnimplementedMqServer() {}

// UnsafeMqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqServer will
// result in compilation errors.
type UnsafeMqServer interface {
	mustEmbedUnimplementedMqServer()
}

func RegisterMqServer(s grpc.ServiceRegistrar, srv MqServer) {
	s.RegisterService(&_Mq_serviceDesc, srv)
}

func _Mq_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.Mq/publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mq_DelayPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServer).DelayPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.Mq/delayPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServer).DelayPublish(ctx, req.(*DelayPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mq_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.Mq/subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mq_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.Mq/ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServer).Ack(ctx, req.(*QueueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mq_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.Mq/nack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServer).Nack(ctx, req.(*QueueId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mq_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mq.Mq",
	HandlerType: (*MqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publish",
			Handler:    _Mq_Publish_Handler,
		},
		{
			MethodName: "delayPublish",
			Handler:    _Mq_DelayPublish_Handler,
		},
		{
			MethodName: "subscribe",
			Handler:    _Mq_Subscribe_Handler,
		},
		{
			MethodName: "ack",
			Handler:    _Mq_Ack_Handler,
		},
		{
			MethodName: "nack",
			Handler:    _Mq_Nack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}
