syntax="proto3";

package mq;
option go_package=".;mq";

import "google/protobuf/empty.proto";

option php_metadata_namespace="DucCnzj\\EventBus\\Mq";
option php_namespace="DucCnzj\\EventBus\\Mq";

message PublishRequest {
  string queue = 1;
  string data = 2;
}

message DelayPublishRequest {
  string queue = 1;
  string data = 2;
  uint64 delaySeconds = 3;
}

message SubscribeRequest {
  string queue = 1;
}

message SubscribeResponse {
  string id = 1;
  string data = 2;
  string queue = 3;
}

message QueueId {
  string id = 1;
}

service Mq {
  // php:inline
  rpc publish(PublishRequest) returns (google.protobuf.Empty);
  // php:inline
  rpc delayPublish(DelayPublishRequest) returns (google.protobuf.Empty);
  // php:inline
  rpc subscribe(SubscribeRequest) returns (SubscribeResponse);
  // php:inline
  rpc ack(QueueId) returns (google.protobuf.Empty);
  // php:inline
  rpc nack(QueueId) returns (google.protobuf.Empty);
}

message TopicPublishRequest {
    string topic = 1;
    string data = 2;
}

message DelayTopicPublishRequest {
    string topic = 1;
    string data = 2;
    uint64 delaySeconds = 3;
}

message TopicSubscribeRequest {
  string topic = 1;
}

service MqTopic {
  // php:inline
  rpc publish(TopicPublishRequest) returns (google.protobuf.Empty);
  // php:inline
  rpc delayPublish(DelayTopicPublishRequest) returns (google.protobuf.Empty);
  // php:inline
  rpc subscribe(TopicSubscribeRequest) returns (SubscribeResponse);
  // php:inline
  rpc ack(QueueId) returns (google.protobuf.Empty);
  // php:inline
  rpc nack(QueueId) returns (google.protobuf.Empty);
}